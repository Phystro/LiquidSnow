using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Thismaker.Enigma
{
    public static partial class Enigma
    {
        /// <summary>
        /// Generates an arguably unique string of characters to be used for unique identification. 
        /// The uniqueness strength boils down to the kind used, but the kind used depends on the scenario.
        /// Some IDs may not be suitable for different scenarios
        /// </summary>
        /// <param name="kind">The kind of ID to be generated, determines the strength as well as the look</param>
        /// <param name="length">The length of the string to be generated, only applicable when the kind is set to Standard or Random</param>
        /// <returns></returns>
        public static string GenerateID(IDKind kind = IDKind.GUID, int length = 12)
        {
            return kind switch
            {
                IDKind.DateTime => GenerateDTID(),
                IDKind.GUID => GenerateGUID(),
                IDKind.Hash => GenerateSHAID(),
                IDKind.Random => Random(length, true),
                _ => GenerateSTDID(length),
            };
        }

        private static string GenerateDTID()
        {
            long ticks = DateTime.Now.Ticks;
            byte[] bytes = BitConverter.GetBytes(ticks);
            string id = Convert.ToBase64String(bytes)
                                    .Replace('+', '_')
                                    .Replace('/', '-')
                                    .TrimEnd('=');
            return id.ToUpper();
        }

        private static string GenerateSTDID(int count)
        {
            var builder = new StringBuilder();
            Enumerable
                .Range(65, 26)
                .Select(e => ((char)e).ToString())
                .Concat(Enumerable.Range(97, 26).Select(e => ((char)e).ToString()))
                .Concat(Enumerable.Range(0, 10).Select(e => e.ToString()))
                .OrderBy(e => Guid.NewGuid())
                .Take(count)
                .ToList().ForEach(e => builder.Append(e));
            return builder.ToString();
        }

        private static string GenerateGUID()
        {
            var guid = Guid.NewGuid();
            return guid.ToString();
        }

        private static string GenerateSHAID()
        {
            var start = GenerateID();
            return GetHashString(start);
        }
    }

    public enum IDKind
    {
        /// <summary>
        /// Generates the strongest ID, should be used for most default scenarios
        /// </summary>
        GUID,
        /// <summary>
        /// Generates a standard ID, of 12 characters in length, conflicts are rare. Characters are all alphanumeric
        /// </summary>
        Standard,

        /// <summary>
        /// ID Generated by this method is simply the GUID but passed through a Hash function for 256 characters
        /// </summary>
        Hash,

        /// <summary>
        /// Generates an ID based on the System.DateTime, conflicts may occur depending on the time, but are rare. May contain hyphen
        /// </summary>
        DateTime,

        /// <summary>
        /// Generates an ID based on the System.Random, conflicts are a matter of pure randomnity, not suitable for conflict-sensitive scenarios
        /// </summary>
        Random,
    }
}
